services:
  app:
    image: ${DOCKERHUB_USERNAME}/${DOCKERHUB_REPO}:latest
    container_name: notificationTick_app_prod
    ports:
      - "8080:8080"
    env_file:
      - ./app.env           # 서버에 있는 프로덕션 환경변수 파일
    environment:
      SPRING_PROFILES_ACTIVE: prod
    depends_on:
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-fsS", "http://localhost:8080/actuator/health" ]
      interval: 20s
      timeout: 5s
      retries: 5
      start_period: 20s
    networks:
      - app
      - monitoring

  postgres-dev:
    image: postgres:15-alpine
    container_name: predictick_postgres_dev
    restart: always
    environment:
      POSTGRES_DB: predictick_dev
      POSTGRES_USER: dev_user
      POSTGRES_PASSWORD: dev_password
    ports:
      - "5432:5432"
    volumes:
      - pgdata_dev:/var/lib/postgresql/data
    networks:
      - app

  redis:
    image: redis:7-alpine
    container_name: predictick_redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 3s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.8.0
    container_name: kafka
    restart: always
    ports:
      - "9092:9092"   # EXTERNAL (외부에서 붙을 필요 없으면 이 줄/EXTERNAL 리스너를 아예 제거해도 됩니다)
      - "9093:9093"   # controller (KRaft)
    environment:
      # --- KRaft 단일 노드 ---
      KAFKA_KRAFT_MODE: "true"
      KAFKA_PROCESS_ROLES: "broker,controller"
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"

      # --- 리스너: 내부=29092, 외부=9092 ---
      KAFKA_LISTENERS: "PLAINTEXT://0.0.0.0:29092,EXTERNAL://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093"
      # PUBLIC_HOST가 비어있어도 안전하게 기본값을 kafka로(외부 필요 없으면 EXTERNAL 자체 제거 권장)
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:29092,EXTERNAL://${PUBLIC_HOST:-kafka}:9092"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT"
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER

      # --- 단일 브로커 안전값 ---
      KAFKA_LOG_DIRS: /var/lib/kafka/data
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0

      # --- KRaft 클러스터 ID(직전 로그에 쓰던 값 그대로 유지) ---
      CLUSTER_ID: "8Uc-NUrZQaCDQPypfxvhzg"

      # --- 메모리 튜닝(OOM 회피) ---
      KAFKA_HEAP_OPTS: "-Xms256m -Xmx384m"

    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - app

    # ✅ 헬스체크: 내부 브로커 주소로 수정(이전의 localhost:9092는 실패 원인)
    healthcheck:
      test: [ "CMD", "bash", "-lc", "kafka-broker-api-versions --bootstrap-server kafka:29092 | grep 'id'" ]
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 60s

  prometheus:
    image: prom/prometheus
    volumes:
      - ../prometheus.yml:/etc/prometheus/prometheus.yml:ro
    command: ["--config.file=/etc/prometheus/prometheus.yml"]
    ports:
      - "9090:9090"
    networks:
      - monitoring

  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - monitoring

volumes:
  pgdata_dev:
  redis_data:
  grafana_data:
  kafka_data:

networks:
  app:
  monitoring:
